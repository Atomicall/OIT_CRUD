-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

CREATE SCHEMA IF NOT EXISTS video_rental;
CREATE TYPE video_rental.rent_status_enum as ENUM ('BOOKED','CANCELED','ISSUED','RETURNED');
CREATE TYPE video_rental.film_status_enum as ENUM ('ISSUED','AVAILABLE');

CREATE TABLE IF NOT EXISTS video_rental.clients
(
    id serial,
    first_name character varying,
    last_name character varying,
    passport_number character varying,
    CONSTRAINT client_id PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS video_rental.rents
(
    id serial,
    start_date date,
    duration integer,
    payment_id integer NOT NULL,
    office_id integer,
    client_id integer,
    rental_day_price numeric(5, 3),
    status video_rental.rent_status_enum,
    CONSTRAINT rent_id PRIMARY KEY (id),
    UNIQUE (payment_id)
);

CREATE TABLE IF NOT EXISTS video_rental.payments
(
    id serial,
    amount_byn double precision,
    "number" serial,
    date date,
    rent_id integer NOT NULL,
    CONSTRAINT payment_id PRIMARY KEY (id),
    UNIQUE (rent_id)
);

CREATE TABLE IF NOT EXISTS video_rental.films
(
    id serial,
    publishing_company_id integer,
    title character varying,
    author_id integer,
    price numeric(5, 3),
    CONSTRAINT film_id PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS video_rental.offices
(
    id serial,
    address_city character varying,
    address character varying,
    CONSTRAINT department_id PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS video_rental.categories
(
    id serial,
    title character varying,
    age_constraints_id integer,
    CONSTRAINT genre_id PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS video_rental.films_categories
(
    film_id integer,
    category_id integer
);

CREATE TABLE IF NOT EXISTS video_rental.rents_films
(
    rent_id integer,
    film_copy_id integer
);

CREATE TABLE IF NOT EXISTS video_rental.film_copies
(
    office_id integer,
    film_id integer,
    serial_number serial NOT NULL,
    status video_rental.film_status_enum,
    PRIMARY KEY (serial_number),
    UNIQUE (serial_number)
);

CREATE TABLE IF NOT EXISTS video_rental.film_authors
(
    id serial,
    first_name character varying,
    last_name character varying,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS video_rental.publishing_companies
(
    id serial,
    title character varying,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS video_rental.age_constraints
(
    id serial,
    age integer,
    constraint_title character varying,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS video_rental.rents
    ADD FOREIGN KEY (office_id)
    REFERENCES video_rental.offices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.rents
    ADD FOREIGN KEY (client_id)
    REFERENCES video_rental.clients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.rents
    ADD FOREIGN KEY (payment_id)
    REFERENCES video_rental.payments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.payments
    ADD FOREIGN KEY (rent_id)
    REFERENCES video_rental.rents (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.films
    ADD FOREIGN KEY (author_id)
    REFERENCES video_rental.film_authors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.films
    ADD FOREIGN KEY (publishing_company_id)
    REFERENCES video_rental.publishing_companies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.categories
    ADD FOREIGN KEY (age_constraints_id)
    REFERENCES video_rental.age_constraints (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.films_categories
    ADD FOREIGN KEY (film_id)
    REFERENCES video_rental.films (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.films_categories
    ADD FOREIGN KEY (category_id)
    REFERENCES video_rental.categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.rents_films
    ADD FOREIGN KEY (rent_id)
    REFERENCES video_rental.rents (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.rents_films
    ADD FOREIGN KEY (film_copy_id)
    REFERENCES video_rental.film_copies (serial_number) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.rents_films
    ADD FOREIGN KEY (film_copy_id)
    REFERENCES video_rental.film_copies (serial_number) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.film_copies
    ADD FOREIGN KEY (office_id)
    REFERENCES video_rental.offices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS video_rental.film_copies
    ADD FOREIGN KEY (film_id)
    REFERENCES video_rental.films (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;